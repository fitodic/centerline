name: CI/CD

on:
  push:
    branches:
      - "master"
    tags:
      - "*"
  pull_request:
    branches:
      - "*"
  schedule:
    # Run weekly on Saturday
    - cron: "37 3 * * SAT"

jobs:
  lint:
    name: Run the linters
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ matrix.python-version }}-v1-${{ hashFiles('**/setup.cfg') }}-${{ hashFiles('**/tox.ini') }}
          restore-keys: |
            ${{ matrix.python-version }}-v1-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade tox
      - name: Test with tox
        run: |
          tox -e lint
          tox -e manifest
          tox -e changelog -- --draft
          tox -e docs
          tox -e pypi-description

  test:
    name: Run the test suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ matrix.python-version }}-v1-${{ hashFiles('**/setup.cfg') }}-${{ hashFiles('**/tox.ini') }}
          restore-keys: |
            ${{ matrix.python-version }}-v1-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[test]

      - name: Install GDAL
        run: |
          sudo add-apt-repository ppa:ubuntugis/ppa
          sudo apt-get update
          sudo apt-get install gdal-bin libgdal-dev
          read GDAL_VERSION <<< $(gdal-config --version)
          echo $GDAL_VERSION
          python -m pip install GDAL==$GDAL_VERSION

      - name: Test
        run: coverage run -m pytest

      - name: Upload coverage data
        uses: actions/upload-artifact@v2
        with:
          name: coverage-data
          path: ".coverage.*"

  coverage:
    name: Collect and report coverage
    runs-on: "ubuntu-latest"
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          # Use latest, so it understands all syntax.
          python-version: "3.10"

      - run: python -m pip install --upgrade coverage

      - name: Download coverage data.
        uses: actions/download-artifact@v4.1.7
        with:
          name: coverage-data

      - name: Combine coverage & check percentage
        run: |
          python -m coverage combine
          python -m coverage html
          python -m coverage report
          python -m coverage xml

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v2
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

      - name: Upload XML report
        uses: actions/upload-artifact@v2
        with:
          name: coverage.xml
          path: coverage.xml

  codecov:
    name: Upload coverage status to codecov.io
    runs-on: ubuntu-latest
    needs: [coverage]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Download coverage data.
        uses: actions/download-artifact@v4.1.7
        with:
          name: coverage.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          verbose: true

  build:
    name: Build Python 🐍 distributions 📦
    needs: [coverage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ matrix.python-version }}-v1-${{ hashFiles('**/setup.cfg') }}-${{ hashFiles('**/tox.ini') }}
          restore-keys: |
            ${{ matrix.python-version }}-v1-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade tox

      - name: Build a binary wheel and a source tarball
        run: tox -e build

      - name: Upload distributions
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: "dist/*"

  publish:
    name: Publish Python 🐍 distributions 📦 to PyPI and TestPyPI
    if: startsWith(github.ref, 'refs/tags')
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Download distributions
        uses: actions/download-artifact@v4.1.7
        with:
          name: dist
          path: dist/

      - name: Publish distribution 📦 to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verify_metadata: false
          skip_existing: true
          verbose: true
          print_hash: true

      - name: Publish distribution 📦 to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verify_metadata: false
          verbose: true
          print_hash: true
